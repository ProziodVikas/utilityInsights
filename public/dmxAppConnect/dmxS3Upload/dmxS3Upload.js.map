{"version":3,"sources":["actions/s3.js","components/s3Upload.js","components/s3UploadMulti.js"],"names":["dmx","Actions","options","inp","this","parse","input","url","file","document","getElementById","files","Promise","resolve","reject","xhr","XMLHttpRequest","onerror","onabort","ontimeout","onload","open","setRequestHeader","type","send","Component","initialData","data","state","idle","ready","uploading","done","uploadProgress","position","total","percent","lastError","status","message","response","attributes","String","default","prop","accept","autoupload","Boolean","methods","abort","reset","select","_input","click","upload","events","start","Event","error","success","ProgressEvent","init","_abortHandler","bind","_errorHandler","_timeoutHandler","_loadHandler","_progressHandler","_dragoverHandler","_dropHandler","_clickHandler","_changeHandler","_xhr","addEventListener","render","node","$node","createElement","props","$parse","performUpdate","updatedProps","has","destroy","removeEventListener","_validate","split","some","charAt","name","match","RegExp","test","replace","toLowerCase","updateFile","info","size","date","lastModified","Date","lastModifiedDate","toISOString","dataUrl","indexOf","reader","FileReader","e","target","result","set","readAsDataURL","onError","dispatchEvent","upload2","encodeURIComponent","JSON","responseText","acl","substr","err","event","console","loaded","Math","ceil","lengthComputable","stopPropagation","preventDefault","dataTransfer","dropEffect","items","length","value","thumbs","thumbWidth","Number","thumbHeight","remove","id","startUpload","onDragover","onDrop","onClick","multiple","onChange","maxRetries","uploads","ii","isUploading","find","nextRetry","retries","_updateData","webkitGetAsEntry","updateFilesFromItems","updateFiles","onAbort","uploaded","setTimeout","upload3","onTimeout","onLoad","statusText","onProgress","resize","src","cb","img","tWidth","parseInt","tHeight","canvas","ctx","getContext","sWidth","width","sHeight","height","min","tRatio","sx","sy","drawImage","toDataURL","push","concat","array","forEach","item","entry","isFile","getAsFile","isDirectory","updateFilesFromDirectory","kind","directory","path","createReader","readEntries","entries","fullPath","warn","index","findIndex","splice","log"],"mappings":"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","file":"dmxS3Upload.js","sourcesContent":["dmx.Actions({\r\n  's3.upload': function (options) {\r\n    var inp = this.parse(options.input);\r\n    var url = this.parse(options.url);\r\n    var file = document.getElementById(inp).files[0];\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      var xhr = new XMLHttpRequest();\r\n\r\n      xhr.onerror = reject;\r\n      xhr.onabort = reject;\r\n      xhr.ontimeout = reject;\r\n      xhr.onload = resolve;\r\n\r\n      xhr.open('PUT', url);\r\n      xhr.setRequestHeader('Content-Type', file.type);\r\n      xhr.send(file);\r\n    });\r\n  },\r\n});\r\n","dmx.Component('s3-upload', {\r\n\r\n  initialData: {\r\n    data: null,\r\n    file: null,\r\n    state: {\r\n      idle: true,\r\n      ready: false,\r\n      uploading: false,\r\n      done: false,\r\n    },\r\n    uploadProgress: {\r\n      position: 0,\r\n      total: 0,\r\n      percent: 0,\r\n    },\r\n    lastError: {\r\n      status: 0,\r\n      message: '',\r\n      response: null,\r\n    },\r\n  },\r\n\r\n  attributes: {\r\n    url: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    prop: {\r\n      type: String,\r\n      default: 'url',\r\n    },\r\n\r\n    accept: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    autoupload: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    abort () {\r\n      this.abort();\r\n    },\r\n\r\n    reset () {\r\n      this.reset();\r\n    },\r\n\r\n    select () {\r\n      this._input.click();\r\n    },\r\n\r\n    upload () {\r\n      this.upload();\r\n    },\r\n  },\r\n\r\n  events: {\r\n    start: Event, // when starting an ajax call\r\n    done: Event, // when ajax call completed (success and error)\r\n    error: Event, // server error or javascript error (json parse or network transport) or timeout error\r\n    abort: Event, // ajax call was aborted\r\n    success: Event, // successful ajax call,\r\n    upload: ProgressEvent, // on upload progress\r\n  },\r\n\r\n  init () {\r\n    this._abortHandler = this._abortHandler.bind(this);\r\n    this._errorHandler = this._errorHandler.bind(this);\r\n    this._timeoutHandler = this._timeoutHandler.bind(this);\r\n    this._loadHandler = this._loadHandler.bind(this);\r\n    this._progressHandler = this._progressHandler.bind(this);\r\n    this._dragoverHandler = this._dragoverHandler.bind(this);\r\n    this._dropHandler = this._dropHandler.bind(this);\r\n    this._clickHandler = this._clickHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n\r\n    this._xhr = new XMLHttpRequest();\r\n    this._xhr.addEventListener('abort', this._abortHandler);\r\n    this._xhr.addEventListener('error', this._errorHandler);\r\n    this._xhr.addEventListener('timeout', this._timeoutHandler);\r\n    this._xhr.addEventListener('load', this._loadHandler);\r\n    this._xhr.upload.addEventListener('progress', this._progressHandler);\r\n  },\r\n\r\n  render (node) {\r\n    this.$node.addEventListener('dragover', this._dragoverHandler);\r\n    this.$node.addEventListener('drop', this._dropHandler);\r\n    this.$node.addEventListener('click', this._clickHandler);\r\n\r\n    this._input = document.createElement('input');\r\n    this._input.type = 'file';\r\n    this._input.accept = this.props.accept || '*/*';\r\n    this._input.addEventListener('change', this._changeHandler);\r\n\r\n    this.$parse();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('accept')) {\r\n      this._input.accept = this.props.accept || '*/*';\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._xhr.removeEventListener('abort', this._abortHandler);\r\n    this._xhr.removeEventListener('error', this._errorHandler);\r\n    this._xhr.removeEventListener('timeout', this._timeoutHandler);\r\n    this._xhr.removeEventListener('load', this._loadHandler);\r\n    this._xhr.upload.removeEventListener('progress', this._progressHandler);\r\n\r\n    this.$node.removeEventListener('dragover', this._dragoverHandler);\r\n    this.$node.removeEventListener('drop', this._dropHandler);\r\n    this.$node.removeEventListener('click', this._clickHandler);\r\n\r\n    this._input.removeEventListener('change', this._changeHandler);\r\n\r\n    this._xhr = null;\r\n    this._input = null;\r\n  },\r\n\r\n  _validate (file) {\r\n    if (this.props.accept) {\r\n      return this.props.accept.split(/\\s*,\\s*/g).some(function (type) {\r\n        if (type.charAt(0) == '.') {\r\n          if (file.name.match(new RegExp('\\\\' + type + '$', 'i'))) {\r\n            return true;\r\n          }\r\n        } else if (/(audio|video|image)\\/\\*/i.test(type)) {\r\n          if (file.type.match(new RegExp('^' + type.replace(/\\*/g, '.*') + '$', 'i'))) {\r\n            return true;\r\n          }\r\n        } else {\r\n          if (file.type.toLowerCase() == type.toLowerCase()) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  updateFile (file) {\r\n    if (!this._validate(file)) {\r\n      return;\r\n    }\r\n\r\n    const info = {\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n      dataUrl: null,\r\n    };\r\n\r\n    if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n      file.reader = new FileReader();\r\n\r\n      file.reader.onload = (e) => {\r\n        info.dataUrl = e.target.result;\r\n        this.set('file', {...info});\r\n      };\r\n\r\n      file.reader.readAsDataURL(file);\r\n    }\r\n\r\n    this.file = file;\r\n\r\n    this.set({\r\n      file: info,\r\n      state: {\r\n        idle: false,\r\n        ready: true,\r\n        uploading: false,\r\n        done: false,\r\n      },\r\n    });\r\n\r\n    if (this.props.autoupload) {\r\n      this.upload();\r\n    }\r\n  },\r\n\r\n  abort () {\r\n    this._xhr.abort();\r\n  },\r\n\r\n  reset () {\r\n    this.abort();\r\n    this.file = null;\r\n    this.set({\r\n      data: null,\r\n      file: null,\r\n      state: {\r\n        idle: true,\r\n        ready: false,\r\n        uploading: false,\r\n        done: false,\r\n      },\r\n      uploadProgress: {\r\n        position: 0,\r\n        total: 0,\r\n        percent: 0,\r\n      },\r\n      lastError: {\r\n        status: 0,\r\n        message: '',\r\n        response: null,\r\n      },\r\n    });\r\n  },\r\n\r\n  upload () {\r\n    if (!this.props.url) {\r\n      this.onError('No url attribute is set');\r\n      return;\r\n    }\r\n\r\n    this.set({\r\n      state: {\r\n        idle: false,\r\n        ready: false,\r\n        uploading: true,\r\n        done: false,\r\n      },\r\n    });\r\n\r\n    this.dispatchEvent('start');\r\n\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onabort = this._abortHandler;\r\n    xhr.onerror = this._errorHandler;\r\n    xhr.onload = () => this.upload2(xhr);\r\n    xhr.open('GET', this.props.url + '?name=' + encodeURIComponent(this.file.name));\r\n    xhr.send();\r\n  },\r\n\r\n  upload2 (xhr) {\r\n    try {\r\n      const data = JSON.parse(xhr.responseText);\r\n      const url = data[this.props.prop];\r\n      this.set('data', data);\r\n      this._xhr.open('PUT', url);\r\n      this._xhr.setRequestHeader('Content-Type', this.file.type);\r\n      if (url.indexOf('x-amz-acl=') != -1) {\r\n        // could be improved\r\n        var acl = url.substr(url.indexOf('x-amz-acl=') + 10);\r\n        if (acl.indexOf('&') != -1) acl = acl.substr(0, acl.indexOf('&'));\r\n        this._xhr.setRequestHeader('x-amz-acl', acl);\r\n      }\r\n      this._xhr.send(this.file);\r\n    } catch (err) {\r\n      this._errorHandler(err);\r\n    }\r\n  },\r\n\r\n  _abortHandler (event) {\r\n    this.set({\r\n      data: null,\r\n      state: {\r\n        idle: false,\r\n        ready: true,\r\n        uploading: false,\r\n        done: false,\r\n      },\r\n      uploadProgress: {\r\n        position: 0,\r\n        total: 0,\r\n        percent: 0,\r\n      },\r\n    });\r\n\r\n    this.dispatchEvent('abort');\r\n    this.dispatchEvent('done');\r\n  },\r\n\r\n  _errorHandler (event) {\r\n    if (event instanceof ProgressEvent) {\r\n      event = 'Network error, perhaps no CORS set';\r\n    }\r\n\r\n    this.set({\r\n      data: null,\r\n      state: {\r\n        idle: false,\r\n        ready: true,\r\n        uploading: false,\r\n        done: false,\r\n      },\r\n      uploadProgress: {\r\n        position: 0,\r\n        total: 0,\r\n        percent: 0,\r\n      },\r\n      lastError: {\r\n        status: 0,\r\n        message: event.message || event,\r\n        response: null,\r\n      },\r\n    });\r\n\r\n    console.error(event);\r\n\r\n    this.dispatchEvent('error');\r\n    this.dispatchEvent('done');\r\n  },\r\n\r\n  _timeoutHandler (event) {\r\n    this._errorHandler('Execution timeout');\r\n  },\r\n\r\n  _loadHandler (event) {\r\n    if (this._xhr.status >= 400) {\r\n      this._errorHandler(this._xhr.responseText);\r\n    } else {\r\n      this.set({\r\n        state: {\r\n          idle: false,\r\n          ready: false,\r\n          uploading: false,\r\n          done: true,\r\n        },\r\n        uploadProgress: {\r\n          position: this.file.size,\r\n          total: this.file.size,\r\n          percent: 100,\r\n        },\r\n      });\r\n\r\n      this.dispatchEvent('success');\r\n      this.dispatchEvent('done');\r\n    }\r\n  },\r\n\r\n  _progressHandler (event) {\r\n    this.set({\r\n      state: {\r\n        idle: false,\r\n        ready: false,\r\n        uploading: true,\r\n        done: false,\r\n      },\r\n      uploadProgress: {\r\n        position: event.loaded,\r\n        total: this.file.size,\r\n        percent: Math.ceil((event.loaded / event.total) * 100),\r\n      },\r\n    });\r\n\r\n    this.dispatchEvent('upload', {\r\n      lengthComputable: event.lengthComputable,\r\n      loaded: event.loaded,\r\n      total: event.total,\r\n    });\r\n  },\r\n\r\n  _dragoverHandler (event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n    event.dataTransfer.dropEffect = event.dataTransfer.items.length == 1 ? 'copy' : 'none';\r\n  },\r\n\r\n  _dropHandler (event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n\r\n    if (event.dataTransfer.files.length == 1) {\r\n      this.updateFile(event.dataTransfer.files[0]);\r\n    }\r\n  },\r\n\r\n  _clickHandler (event) {\r\n    this._input.click();\r\n  },\r\n\r\n  _changeHandler (event) {\r\n    this.updateFile(event.target.files[0]);\r\n    this._input.value = '';\r\n    this._input.type = '';\r\n    this._input.type = 'file';\r\n  },\r\n\r\n});\r\n","dmx.Component('s3-upload-multi', {\r\n\r\n  initialData: {\r\n    data: null,\r\n    files: [],\r\n    state: {\r\n      idle: true,\r\n      ready: false,\r\n      uploading: false,\r\n    },\r\n    lastError: '',\r\n  },\r\n\r\n  attributes: {\r\n    url: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    prop: {\r\n      type: String,\r\n      default: 'url',\r\n    },\r\n\r\n    accept: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    autoupload: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    thumbs: {\r\n      type: String,\r\n      default: 'true',\r\n    },\r\n\r\n    thumbWidth: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n\r\n    thumbHeight: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    abort () {\r\n      this.abort();\r\n    },\r\n\r\n    reset () {\r\n      this.reset();\r\n    },\r\n\r\n    select () {\r\n      this.input.click();\r\n    },\r\n\r\n    remove (id) {\r\n      this.remove(id);\r\n    },\r\n\r\n    upload () {\r\n      this.startUpload();\r\n    },\r\n  },\r\n\r\n  events: {\r\n    start: Event, // when starting an ajax call\r\n    done: Event, // when ajax call completed (success and error)\r\n    error: Event, // server error or javascript error (json parse or network transport) or timeout error\r\n    abort: Event, // ajax call was aborted\r\n    success: Event, // successful ajax call\r\n  },\r\n\r\n  render (node) {\r\n    this.$node.addEventListener('dragover', this.onDragover.bind(this));\r\n    this.$node.addEventListener('drop', this.onDrop.bind(this));\r\n    this.$node.addEventListener('click', this.onClick.bind(this));\r\n\r\n    this.input = document.createElement('input');\r\n    this.input.type = 'file';\r\n    this.input.multiple = true;\r\n    this.input.accept = this.props.accept || '*/*';\r\n    this.input.addEventListener('change', this.onChange.bind(this));\r\n\r\n    this.maxRetries = 5;\r\n    this.uploads = [];\r\n    this.ii = 0;\r\n\r\n    this.$parse();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('accept')) {\r\n      this.input.accept = this.props.accept || '*/*';\r\n    }\r\n  },\r\n\r\n  isUploading () {\r\n    return !!this.uploads.find(function (upload) {\r\n      return upload.info.uploading;\r\n    }, this);\r\n  },\r\n\r\n  nextRetry (retries) {\r\n    return (this.maxRetries - retries + 1) * 3000;\r\n  },\r\n\r\n  _updateData () {\r\n    this.set('files', [...this.data.files]);\r\n\r\n    if (this.uploads.length) {\r\n      if (this.isUploading()) {\r\n        this.set('state', {\r\n          idle: false,\r\n          ready: false,\r\n          uploading: true,\r\n        });\r\n      } else {\r\n        this.set('state', {\r\n          idle: false,\r\n          ready: true,\r\n          uploading: false,\r\n        });\r\n      }\r\n    } else {\r\n      this.set('state', {\r\n        idle: true,\r\n        ready: false,\r\n        uploading: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  _validate (file) {\r\n    // simple validation based on accept to filter out unallowed files\r\n    if (this.props.accept) {\r\n      return this.props.accept.split(/\\s*,\\s*/g).some(function (type) {\r\n        if (type.charAt(0) == '.') {\r\n          if (file.name.match(new RegExp('\\\\' + type + '$', 'i'))) {\r\n            return true;\r\n          }\r\n        } else if (/(audio|video|image)\\/\\*/i.test(type)) {\r\n          if (file.type.match(new RegExp('^' + type.replace(/\\*/g, '.*') + '$', 'i'))) {\r\n            return true;\r\n          }\r\n        } else {\r\n          if (file.type.toLowerCase() == type.toLowerCase()) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  onDragover (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    e.dataTransfer.dropEffect = 'copy';\r\n  },\r\n\r\n  onDrop (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    if (!e.dataTransfer) return;\r\n\r\n    var files = e.dataTransfer.files;\r\n\r\n    if (files.length) {\r\n      var items = e.dataTransfer.items;\r\n\r\n      if (items && items.length && items[0].webkitGetAsEntry) {\r\n        this.updateFilesFromItems(items);\r\n      } else {\r\n        this.updateFiles(files);\r\n      }\r\n    }\r\n  },\r\n\r\n  onClick (e) {\r\n    this.input.click();\r\n  },\r\n\r\n  onChange (e) {\r\n    this.updateFiles(e.target.files);\r\n    this.input.value = '';\r\n    this.input.type = '';\r\n    this.input.type = 'file';\r\n  },\r\n\r\n  onAbort (upload, e) {\r\n    upload.info.uploading = false;\r\n    upload.info.uploaded = 0;\r\n    upload.info.percent = 0;\r\n\r\n    //this.set('files', [...this.data.files]);\r\n    this._updateData();\r\n\r\n    if (!this.isUploading()) {\r\n      this.dispatchEvent('abort');\r\n      this.dispatchEvent('done');\r\n    }\r\n  },\r\n\r\n  onError (upload, e) {\r\n    if (upload.url && upload.retries) {\r\n      setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n      return;\r\n    }\r\n\r\n    if (e instanceof ProgressEvent) {\r\n      e = 'Network error, perhaps no CORS set';\r\n    } else {\r\n      e = e.message || e;\r\n    }\r\n\r\n    this.set('lastError', e);\r\n\r\n    upload.info.uploading = false;\r\n    upload.info.uploaded = 0;\r\n    upload.info.percent = 0;\r\n    upload.info.error = e;\r\n\r\n    //this.set('files', [...this.data.files]);\r\n    this._updateData();\r\n\r\n    if (!this.isUploading()) {\r\n      this.dispatchEvent('error');\r\n      this.dispatchEvent('done');\r\n    }\r\n  },\r\n\r\n  onTimeout (upload, e) {\r\n    this.onError(upload, 'Execution timeout');\r\n  },\r\n\r\n  onLoad (upload, e) {\r\n    if (upload.xhr.status >= 500 || upload.xhr.status == 429) {\r\n      if (upload.retries) {\r\n        setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n      } else {\r\n        this.onError(upload, upload.xhr.responseText || upload.xhr.statusText);\r\n      }\r\n    } else if (upload.xhr.status >= 400) {\r\n      this.onError(upload, upload.xhr.responseText || upload.xhr.statusText);\r\n    } else {\r\n      this.remove(upload.file.id);\r\n\r\n      //this.set('files', [...this.data.files]);\r\n      this._updateData();\r\n\r\n      if (!this.isUploading()) {\r\n        if (!this.uploads.length) {\r\n          this.dispatchEvent('success');\r\n        } else {\r\n          this.dispatchEvent('error');\r\n        }\r\n        this.dispatchEvent('done');\r\n      }\r\n    }\r\n  },\r\n\r\n  onProgress (upload, e) {\r\n    upload.info.uploaded = e.loaded;\r\n    upload.info.percent = e.lengthComputable ? Math.ceil((e.loaded / e.total) * 100) : 0;\r\n\r\n    //this.set('files', [...this.data.files]);\r\n    this._updateData();\r\n  },\r\n\r\n  resize (src, cb) {\r\n    var img = document.createElement('img');\r\n\r\n    var tWidth = parseInt(this.props['thumb-width']) || 100;\r\n    var tHeight = parseInt(this.props['thumb-height']) || 100;\r\n\r\n    img.onload = function () {\r\n      var canvas = document.createElement('canvas');\r\n      var ctx = canvas.getContext('2d');\r\n\r\n      var sWidth = img.width;\r\n      var sHeight = img.height;\r\n\r\n      tWidth = Math.min(tWidth, sWidth);\r\n      tHeight = Math.min(tHeight, sHeight);\r\n\r\n      var sRatio = sWidth / sHeight;\r\n      var tRatio = tWidth / tHeight;\r\n\r\n      if (sWidth > tWidth || sHeight > tHeight) {\r\n        if (sRatio > tRatio) {\r\n          sWidth = sHeight * tRatio;\r\n        } else {\r\n          sHeight = sWidth / tRatio;\r\n        }\r\n      }\r\n\r\n      canvas.width = tWidth;\r\n      canvas.height = tHeight;\r\n\r\n      var sx = (img.width - sWidth) / 2;\r\n      var sy = (img.height - sHeight) / 2;\r\n\r\n      ctx.drawImage(img, sx, sy, sWidth, sHeight, 0, 0, tWidth, tHeight);\r\n\r\n      cb(canvas.toDataURL());\r\n    };\r\n\r\n    img.src = src;\r\n  },\r\n\r\n  updateFile (file) {\r\n    if (!this._validate(file)) {\r\n      return;\r\n    }\r\n\r\n    file.id = ++this.ii;\r\n\r\n    var info = {\r\n      id: file.id,\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n      data: null,\r\n      uploading: false,\r\n      uploaded: 0,\r\n      percent: 0,\r\n      ready: false,\r\n      error: null,\r\n      dataUrl: null,\r\n    };\r\n\r\n    if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n      file.reader = new FileReader();\r\n\r\n      file.reader.onload = (e) => {\r\n        info.dataUrl = e.target.result;\r\n\r\n        if (this.props.thumbs) {\r\n          this.resize(info.dataUrl, function (dataUrl) {\r\n            info.dataUrl = dataUrl;\r\n            info.ready = true;\r\n            this.set('files', [...this.data.files]);\r\n          });\r\n        } else {\r\n          info.ready = true;\r\n        }\r\n\r\n        //this.set('files', [...this.data.files]);\r\n        this._updateData();\r\n      };\r\n\r\n      file.reader.readAsDataURL(file);\r\n    } else {\r\n      info.ready = true;\r\n    }\r\n\r\n    var upload = {\r\n      retries: this.maxRetries,\r\n      info: info,\r\n      file: file,\r\n      xhr: null,\r\n    };\r\n\r\n    this.uploads.push(upload);\r\n\r\n    this.set({\r\n      files: this.data.files.concat([info]),\r\n      state: {\r\n        idle: false,\r\n        ready: true,\r\n        uploading: false,\r\n        done: false,\r\n      },\r\n    });\r\n\r\n    if (this.props.autoupload) {\r\n      if (!this.isUploading()) {\r\n        this.dispatchEvent('start');\r\n      }\r\n\r\n      this.upload(upload);\r\n    }\r\n  },\r\n\r\n  updateFiles (files) {\r\n    dmx.array(files).forEach(function (file) {\r\n      this.updateFile(file);\r\n    }, this);\r\n  },\r\n\r\n  updateFilesFromItems (items) {\r\n    dmx.array(items).forEach(function (item) {\r\n      var entry;\r\n\r\n      if (item.webkitGetAsEntry && (entry = item.webkitGetAsEntry())) {\r\n        if (entry.isFile) {\r\n          this.updateFile(item.getAsFile());\r\n        } else if (entry.isDirectory) {\r\n          this.updateFilesFromDirectory(entry);\r\n        }\r\n      } else if (item.getAsFile) {\r\n        if (!item.kind || item.kind == 'file') {\r\n          this.updateFile(item.getAsFile());\r\n        }\r\n      }\r\n    }, this);\r\n  },\r\n\r\n  updateFilesFromDirectory (directory, path) {\r\n    var reader = directory.createReader();\r\n    var readEntries = function () {\r\n      reader.readEntries(\r\n        function (entries) {\r\n          if (entries.length) {\r\n            entries.forEach(function (entry) {\r\n              if (entry.isFile) {\r\n                entry.file(\r\n                  function (file) {\r\n                    file.fullPath = path + '/' + file.name;\r\n                    this.updateFile(file);\r\n                  }.bind(this)\r\n                );\r\n              } else if (entry.isDirectory) {\r\n                this.updateFilesFromDirectory(entry, path + '/' + entry.name);\r\n              }\r\n            }, this);\r\n          }\r\n\r\n          readEntries();\r\n        }.bind(this),\r\n        function (err) {\r\n          console.warn(err);\r\n        }.bind(this)\r\n      );\r\n    }.bind(this);\r\n\r\n    readEntries();\r\n  },\r\n\r\n  abort () {\r\n    this.uploads.forEach(function (upload) {\r\n      if (upload.xhr) upload.xhr.abort();\r\n    });\r\n  },\r\n\r\n  reset () {\r\n    this.abort();\r\n\r\n    this.uploads = [];\r\n\r\n    this.set({\r\n      data: null,\r\n      files: [],\r\n      state: {\r\n        idle: true,\r\n        ready: false,\r\n        uploading: false,\r\n      },\r\n      lastError: '',\r\n    });\r\n  },\r\n\r\n  remove (id) {\r\n    var index = this.uploads.findIndex(function (upload) {\r\n      return upload.file.id == id;\r\n    });\r\n\r\n    if (index != -1) {\r\n      if (this.uploads[index].xhr) {\r\n        this.uploads[index].xhr.abort();\r\n      }\r\n      this.uploads.splice(index, 1);\r\n      this.data.files.splice(index, 1);\r\n      //this.set('files', [...this.data.files]);\r\n      this._updateData();\r\n    }\r\n  },\r\n\r\n  startUpload () {\r\n    this.dispatchEvent('start');\r\n\r\n    this.uploads.forEach(function (upload) {\r\n      this.upload(upload);\r\n    }, this);\r\n  },\r\n\r\n  upload (upload) {\r\n    if (upload.info && upload.info.uploading) return;\r\n\r\n    if (!this.props.url) {\r\n      this.onError('No url attribute is set');\r\n      return;\r\n    }\r\n\r\n    this.set({\r\n      state: {\r\n        idle: false,\r\n        ready: false,\r\n        uploading: true,\r\n        done: false,\r\n      },\r\n    });\r\n\r\n    upload.info.uploading = true;\r\n\r\n    this.set('files', [...this.data.files]);\r\n\r\n    upload.xhr = new XMLHttpRequest();\r\n    upload.xhr.onabort = this.onAbort.bind(this, upload);\r\n    upload.xhr.onerror = this.onError.bind(this, upload);\r\n    upload.xhr.ontimeout = this.onTimeout.bind(this, upload);\r\n    upload.xhr.onload = this.upload2.bind(this, upload);\r\n    upload.xhr.open('GET', this.props.url + '?name=' + encodeURIComponent(upload.file.name));\r\n    upload.xhr.send();\r\n  },\r\n\r\n  upload2 (upload) {\r\n    try {\r\n      upload.info.data = JSON.parse(upload.xhr.responseText);\r\n      upload.url = upload.info.data[this.props.prop];\r\n      upload.xhr.onload = this.onLoad.bind(this, upload);\r\n      upload.xhr.upload.addEventListener('progress', this.onProgress.bind(this, upload));\r\n      this.upload3(upload);\r\n    } catch (err) {\r\n      this.onError(upload, err);\r\n    }\r\n  },\r\n\r\n  upload3 (upload) {\r\n    try {\r\n      upload.xhr.open('PUT', upload.url);\r\n      upload.xhr.setRequestHeader('Content-Type', upload.file.type);\r\n      if (upload.url.indexOf('x-amz-acl=') != -1) {\r\n        // could be improved\r\n        var acl = upload.url.substr(upload.url.indexOf('x-amz-acl=') + 10);\r\n        if (acl.indexOf('&') != -1) acl = acl.substr(0, acl.indexOf('&'));\r\n        upload.xhr.setRequestHeader('x-amz-acl', acl);\r\n      }\r\n      upload.xhr.send(upload.file);\r\n    } catch (err) {\r\n      if (upload.retries) {\r\n        console.log('Retry upload', upload);\r\n        setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n      } else {\r\n        console.log('Error in upload', upload, err);\r\n        this.onError(upload, err);\r\n      }\r\n    }\r\n  },\r\n\r\n});\r\n"]}